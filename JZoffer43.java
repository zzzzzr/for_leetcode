
import java.util.*;
// leetcode 233
// https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/solution/mian-shi-ti-43-1n-zheng-shu-zhong-1-chu-xian-de-2/

class SolutionJZoffer43 {

	public int countDigitOne2(int n) {
		int digit = 1, res = 0;

		int high = n / 10, cur = n % 10, low = 0;

		while(high != 0 || cur != 0) {
			if(cur == 0)
				res += high * digit;
			else if(cur == 1)
				res += high * digit + low + 1;
			else
				res += (high + 1) * digit;

			low += cur * digit;
			cur = high % 10;
			high /= 10;
			digit *= 10;
		}
		return res;
	}


	public int countDigitOne1(int n) {
		if(n<10)
			return 1;
		List<Integer> lis = toarr(n);
		if (lis.size()==2)
			return count1(lis,1)+count1(lis,0);

		return 1;
	}

	public int count1(List<Integer>lis,int index){
		int ans=0;
		for (int i=0;i<lis.size();i++){
			if (i==0||i==lis.size()-1){
				int other = 0;
				for (int j=0;j<lis.size();j++){
					if (j==i)
						continue;
					other+=i;
					other*=10;
				}
				ans+=(other+1);
			}
			else{

			}
		}
		return ans;
	}

	public List<Integer> toarr(int num){
		List<Integer> arr = new LinkedList<>();
		while(num>0){
			arr.add(num%10);
			num=num/10;
		}
		return arr;
	}
	/*
	1位数 1
	2位数 1x x1
	3位数 1xx x1x xx1

	1
	10 11 12 13 14 15 16 17 18 19
	21 31 41 51 61 71 81 91
	100 101 102 103 104 105 106 107 108 109
	110 111 112 113 114 115 116 117 118 119
	120 121 122 123

	123
	个位带1： 1 11 21 31 41 51 61 71 81 91 101 111 121 ： 13 = 1 + 10 + 2  ： 001-121 ：13
	十位带1： 10 11 12 13 14 15 16 17 18 19 110 111 112 113 114 115 116 117 118 119 ： 20 = 10 + 10 ： 010-113 -> 010-119 ：20
	百位带1： 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 ： 10 + 10 + 4 ： 100-123 ：24
	 */

	public int countDigitOne(int n) {
		int ans=0;
		for (int i=1;i<=n;i++)
			ans+=calone(i);
		return ans;
	}
	public int calone(int num){
		int ans=0;
		while(num>0){
			if (num%10==1)
				ans++;
			num=num/10;
		}
		return ans;
	}
}
public class JZoffer43 {
	public static void main(String []args){
		SolutionJZoffer43 sol = new SolutionJZoffer43();
		System.out.println(sol.countDigitOne(133));
//		for (int i=1;i<=1234;i++){
//			int n= sol.calone(i);
//			if (n!=0)
//				System.out.print(i+" ");
//			if (i%10==0)
//				System.out.println();
//		}
	}
}

/*
133:68
123:57
113:40
103:25
33:14   :1 11 21 31 ,10-19: 4+10
23:13   :1 11 21 , 10-19: 3+10
13:6
3:1
 */

/*
689

1
10 11 12 13 14 15 16 17 18 19
21 31 41 51 61 71 81 91 100
101 102 103 104 105 106 107 108 109 110
111 112 113 114 115 116 117 118 119 120
121 122 123 124 125 126 127 128 129 130
131 132 133 134 135 136 137 138 139 140
141 142 143 144 145 146 147 148 149 150
151 152 153 154 155 156 157 158 159 160
161 162 163 164 165 166 167 168 169 170
171 172 173 174 175 176 177 178 179 180
181 182 183 184 185 186 187 188 189 190
191 192 193 194 195 196 197 198 199
201 210
211 212 213 214 215 216 217 218 219
221 231 241 251 261 271 281 291 301
310 311 312 313 314 315 316 317 318 319
321 331 341 351 361 371 381 391 401
410 411 412 413 414 415 416 417 418 419
421 431 441 451 461 471 481 491 501
510 511 512 513 514 515 516 517 518 519
521 531 541 551 561 571 581 591 601
610
611 612 613 614 615 616 617 618 619
621
631
641
651
661
671
681
691
701 710
711 712 713 714 715 716 717 718 719
721
731
741
751
761
771
781
791
801 810
811 812 813 814 815 816 817 818 819
821
831
841
851
861
871
881
891
901 910
911 912 913 914 915 916 917 918 919
921
931
941
951
961
971
981
991 1000
1001 1002 1003 1004 1005 1006 1007 1008 1009 1010
1011 1012 1013 1014 1015 1016 1017 1018 1019 1020
1021 1022 1023 1024 1025 1026 1027 1028 1029 1030
1031 1032 1033 1034 1035 1036 1037 1038 1039 1040
1041 1042 1043 1044 1045 1046 1047 1048 1049 1050
1051 1052 1053 1054 1055 1056 1057 1058 1059 1060
1061 1062 1063 1064 1065 1066 1067 1068 1069 1070
1071 1072 1073 1074 1075 1076 1077 1078 1079 1080
1081 1082 1083 1084 1085 1086 1087 1088 1089 1090
1091 1092 1093 1094 1095 1096 1097 1098 1099 1100
1101 1102 1103 1104 1105 1106 1107 1108 1109 1110
1111 1112 1113 1114 1115 1116 1117 1118 1119 1120
1121 1122 1123 1124 1125 1126 1127 1128 1129 1130
1131 1132 1133 1134 1135 1136 1137 1138 1139 1140
1141 1142 1143 1144 1145 1146 1147 1148 1149 1150
1151 1152 1153 1154 1155 1156 1157 1158 1159 1160
1161 1162 1163 1164 1165 1166 1167 1168 1169 1170
1171 1172 1173 1174 1175 1176 1177 1178 1179 1180
1181 1182 1183 1184 1185 1186 1187 1188 1189 1190
1191 1192 1193 1194 1195 1196 1197 1198 1199 1200
1201 1202 1203 1204 1205 1206 1207 1208 1209 1210
1211 1212 1213 1214 1215 1216 1217 1218 1219 1220
1221 1222 1223 1224 1225 1226 1227 1228 1229 1230
1231 1232 1233 1234
 */